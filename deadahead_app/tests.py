from django.test import TestCase

# Create your tests here.
from .utils import ttest_1samp


class StatsTest(TestCase):
    VAR_B_1 = [13.71, 14.57, 12.07, 14.41, 15.11, 14.5, 14.21, 14.15, 13.85, 13.54, 14.24, 14.52, 13.99, 14.28, 13.74, 14.04, 14.47, 13.87, 14.25, 15.42, 13.28, 12.82, 13.84, 13.83, 14.54, 14.63, 13.35, 14.37, 14.63, 14.43]
    VAR_A_1 = [13.82, 13.33, 11.74, 14.19, 14.84, 14.18, 12.43, 13.69, 12.75, 13.51, 13.7, 13.6, 13.87, 13.02, 14.48, 13.78, 13.29, 13.9, 14.51, 13.21, 13.66, 13.52, 13.45, 12.88, 14.81, 14.82, 12.98, 12.94, 13.37, 15.14]
    VAR_B_2 = [14.57, 12.07, 14.41, 15.11, 14.5, 14.21, 14.15, 13.85, 13.54, 14.24, 14.52, 13.99, 14.28, 13.74, 14.04, 14.47, 13.87, 14.25, 15.42, 13.28, 12.82, 13.84, 13.83, 14.54, 14.63, 13.35, 14.37, 14.63, 14.43]
    VAR_A_2 = [13.33, 11.74, 14.19, 14.84, 14.18, 12.43, 13.69, 12.75, 13.51, 13.7, 13.6, 13.87, 13.02, 14.48, 13.78, 13.29, 13.9, 14.51, 13.21, 13.66, 13.52, 13.45, 12.88, 14.81, 14.82, 12.98, 12.94, 13.37, 15.14]

    @classmethod
    def setUpTestData(cls):
        return ""
    
    def test_ttest_1samp(self):
        pval_1 = ttest_1samp(self.VAR_B_1, self.VAR_A_1)
        self.assertTrue(pval_1 != -1)

        pval_2 = ttest_1samp(self.VAR_B_1, self.VAR_A_2)        
        self.assertTrue(pval_2 == -1)

        pval_3 = ttest_1samp([1], [1])        
        self.assertTrue(pval_3 == -1)